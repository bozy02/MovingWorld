buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.6.4"
        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "7.0.0"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

apply from: "properties.gradle"

apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"

def branch
if (System.env.BRANCH_NAME) {
    // Jenkins support
    branch = System.env.BRANCH_NAME
    branch = branch.substring(branch.lastIndexOf('/') + 1)
} else {
    branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
}
def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()

version = branch + '-' + modVersion + '.' + commits + (dirty ? '-dirty' : '')
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "16"

ext {
    compoundClassesDir = file('build/compound')
}

configurations {
    nonModDep
}

minecraft {
    mappings channel: "official", version: mappingsVersion

    runs {
        client {
            environment "MOD_CLASSES", [
                    sourceSets.main.output.resourcesDir.absolutePath,
                    sourceSets.main.output.classesDirs.asPath,
                    project.compoundClassesDir.absolutePath
            ].join(File.pathSeparator)

            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "REGISTRIES"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            mods {
                movingworld {
                    source(sourceSets.main)
                }
            }
        }

        server {
            environment "MOD_CLASSES", [
                    sourceSets.main.output.resourcesDir.absolutePath,
                    sourceSets.main.output.classesDirs.asPath,
                    project.compoundClassesDir.absolutePath
            ].join(File.pathSeparator)

            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "REGISTRIES"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            mods {
                movingworld {
                    source(sourceSets.main)
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.tridevmc.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forgeVersion}"
    compile "com.tridevmc.compound:compound-all:${compoundVersion}"
    nonModDep "com.tridevmc.compound:compound-all:${compoundVersion}"
}

task extractNonMod(type: Copy) {
    project.compoundClassesDir.delete()
    project.compoundClassesDir.mkdirs()
    from zipTree(project.configurations.nonModDep.find { it.name.startsWith("compound") })
    into project.compoundClassesDir
}

compileJava.dependsOn(extractNonMod)

shadowJar {
    classifier = ""

    dependencies {
        include(dependency("com.tridevmc.compound:compound-all:${compoundVersion}"))
    }
	repositories {
mavenCentral()
maven { url = "https://maven.minecraftforge.net/" }
maven { url = "https://repo.tridevmc.com/repository/maven-public/" }
}

dependencies {
minecraft "net.minecraftforge:forge:${forgeVersion}"
compileOnly "com.tridevmc.compound:compound-api:${compoundVersion}"
runtimeOnly "com.tridevmc.compound:compound-all:${compoundVersion}"
}

task extractNonMod(type: Copy) {
project.compoundClassesDir.delete()
project.compoundClassesDir.mkdirs()
from zipTree(project.configurations.runtimeOnly.singleFile)
into project.compoundClassesDir
}

compileJava.dependsOn(extractNonMod)

shadowJar {
classifier = ""
dependencies {
include(dependency("com.tridevmc.compound:compound-all:${compoundVersion}"))
}
relocate "com.tridevmc.compound", "${group}.compound"
}

tasks.build.dependsOn shadowJar

artifacts {
archives shadowJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
manifest {
attributes([
"Specification-Title" : "Moving World",
"Specification-Vendor" : "Trident",
"Specification-Version" : "25.0", // We are version 2 of the modlauncher specification
"Implementation-Title" : project.name,
"Implementation-Version" : "${version}",
"Implementation-Vendor" : "Trident",
"Implementation-Timestamp" : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
])
}
}

minecraft {
// Use the same mappings as the client and server (optional)
// Note: 1.19.3 uses official mappings and therefore this line is not required.
// mappings channel: "snapshot", version: mappingsVersion

   // Define the client and server runs
runs {
    client {
        // Add the mod's sources and resources to the classpath
        modSources sourceSets.main
        // Set the working directory to the 'run' folder
        workingDirectory project.file("run")
        // Add mod jars to the classpath (optional)
        modJars configurations.modImplementation
        // Set JVM arguments for the client run (optional)
        property "forge.logging.markers", "REGISTRIES"
        property "forge.logging.console.level", "debug"
    }
    server {
        // Add the mod's sources and resources to the classpath
        modSources sourceSets.main
        // Set the working directory to the 'run' folder
        workingDirectory project.file("run")
        // Add mod jars to the classpath (optional)
        modJars configurations.modImplementation
        // Set JVM arguments for the server run (optional)
        property "forge.logging.markers", "REGISTRIES"
        property "forge.logging.console.level", "debug"
    }
}


}
